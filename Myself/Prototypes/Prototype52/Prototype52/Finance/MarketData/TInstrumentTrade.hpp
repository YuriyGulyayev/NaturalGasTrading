#pragma once

#include "../Math/TQuantityAndPrice.hpp"

#include "../../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
namespace MarketData
{
   // This class is similar to {TInstrumentBestAggregatedBidAskQuote}.
   // yg? See comments there.
   // I considered to derive this class from {Math::TQuantityAndPrice}, which would make it similar to
   // {TInstrumentAggregatedQuote} but I don't really like this idea.

   class TInstrumentTrade
   {
#if( /* {public QuantityAndPrice}. */ 1 )

      //
      public: Math::TQuantityAndPrice QuantityAndPrice;

#endif
#if( /* //{public IsConditional}. */ 1 )

      //// yg? Is this data common enough to be in this class.
      //// yg? Do we need a bitmask with multiple flags in it? For now this is the only flag.
      //// yg? Consider reordering this field to before {QuantityAndPrice}.
      //public: bool IsConditional;

#endif
#if( /* {public GenerationDateTimeStampMillisecondsSince1970}. */ 1 )

      //
      public: double GenerationDateTimeStampMillisecondsSince1970;

#endif
#if( /* {public SendingDateTimeStampMillisecondsSince1970}. */ 1 )

      //
      public: double SendingDateTimeStampMillisecondsSince1970;

#endif
#if( /* {public IsValid}. */ 1 )

      // A "valid" trade usually means real-time (not historical) and not any sort of indicative.
      // We probably don't need a bitmask for this but {TInstrumentBestAggregatedBidAskQuote} has a bitmask.
      public: bool IsValid;

#endif

#if( /* {(public)} Instance default constructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {(public)} Instance copy constructor. */ 1 )

      // Could be autogenerated.
      // We don't need an instance move constructor.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {(public) operator =}. */ 1 )

      // Could be autogenerated.
      // We don't need a move assignment operator.

#endif

#if( /* {public Reset}. */ 1 )

      //

      public: void Reset();

#endif
#if( /* {public Equals}. */ 1 )

      // yg? We might also need {operator ==}.

// todo Rename to {Equal}?
      public: static bool Equals
         ( TInstrumentTrade const & instance1,
           TInstrumentTrade const & instance2
         );

#endif
   };
}
}

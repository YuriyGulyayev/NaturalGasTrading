#pragma once

#include "./TInstrumentTradeSubscriptionBase.hpp"

#include "../../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
namespace MarketData
{
   // yg? This is essentially a {typedef} but a real {typedef} would not compile even if the base class was not declared {abstract}.

   template
      < typename TInstrument_
      >
   class TInstrumentTradeSubscription sealed :
      public TInstrumentTradeSubscriptionBase< TInstrumentTradeSubscription< TInstrument_ >, TInstrument_ >
   {
#if( /* {(public)} Instance default constructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This probably does not need to be {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif
   };
}
}

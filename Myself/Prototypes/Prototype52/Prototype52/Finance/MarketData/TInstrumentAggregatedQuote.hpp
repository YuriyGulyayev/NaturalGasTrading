#pragma once

#include "../Math/TQuantityAndPrice.hpp"

#include "../../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
namespace MarketData
{
   // This data can be used for an order book bid or ask entry, including top of book only.
   // The orders probably can be single instrument or multi-leg.
   // yg? This class does not have a non-autogenerated constructor.
   // yg? Possible other names for this class: {TInstrumentAggregatedBidOrAskQuote}, {TInstrumentBidOrAskAggregatedQuote},
   // yg? {TLimitOrderAggregatedBookEntry}, {TLimitOrderAggregatedBookRecord}.

   class TInstrumentAggregatedQuote :
      public Math::TQuantityAndPrice
   {
#if( /* {public NumberOrders}. */ 1 )

      // Not all brokerage APIs provide this data.
      public: int NumberOrders;

#endif

#if( /* {(public)} Instance default constructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {(public)} Instance copy constructor. */ 1 )

      // Could be autogenerated.
      // We don't need an instance move constructor.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This doesn't need to be virtual.

#endif
#if( /* {(public) operator =}. */ 1 )

      // Could be autogenerated.
      // We don't need a move assignment operator.

#endif

#if( /* {public Reset}. */ 1 )

      // This method hides an inherited one.

      public: void Reset();

#endif
#if( /* {public Equals}. */ 1 )

      // This method hides an inherited one.
      // yg? We might also need {operator ==}.

// todo Rename to {Equal}?
      public: static bool Equals
         ( TInstrumentAggregatedQuote const & instance1,
           TInstrumentAggregatedQuote const & instance2
         );

#endif
   };
}
}

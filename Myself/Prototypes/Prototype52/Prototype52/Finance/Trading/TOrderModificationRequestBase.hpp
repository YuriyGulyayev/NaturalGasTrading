#pragma once

#include "../../Common/ObjectModel/TDataSubscriptionBase.hpp"

#include "../../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
namespace Trading
{
   // TODO 3 yg? This class is a placeholder. Some members might need to be moved here from derived classes.
   // The order is not implied to be single instrument.
   // It's possible to derive this class from {TInstrumentDataSubscriptionBase<,>} but I don't like this idea.
   // The {TInstrumentDataSubscriptionBase<,>}, {TSingleInstrumentOrderBase<,>}, and {TOrderModificationRequestBase<,>}
   // classes are similar and some related comments repeat.

   template
      < typename TDerivedDataType_,
         typename TOrder_
      >
   class TOrderModificationRequestBase abstract :
      public ::Common::ObjectModel::TDataSubscriptionBase< TDerivedDataType_ >
   {
#if( /* {private Order_}. */ 1 )

      // The constructor does not initialize this field.
      private: TOrder_ * Order_;

#endif

#if( /* {protected} Instance default constructor. */ 1 )

      //

      protected: explicit TOrderModificationRequestBase();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This probably doesn't need to be {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Prepare}. */ 1 )

      // yg? Consider eliminating this method parameter and adding a {SetOrder} method to be called before this one.
      // yg? Consider eliminating this method and passing its parameter to the constructor.
      // yg? But this refactoring is probably not urgent.
      // This probably doesn't need to be {virtual}.
      
      public: void Prepare
         ( TOrder_ & order1
         );

#endif

#if( /* {public Order}. */ 1 )

      //

      public: TOrder_ & Order() const;

#endif
   };
}
}

#pragma once

//#include "./.hpp"

#include "../../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
// todo Rename this namespace to {DataStructures}?
namespace Math
{
   // yg? This class does not have a non-autogenerated constructor.
   // yg? Data type of {Quantity} and possibly {Price} should be a template parameter --
   // yg? to make it easy to handle integer quantities.

   class TQuantityAndPrice
   {
#if( /* {public Quantity}. */ 1 )

      // A negative value is considered invalid.
      public: double Quantity;

#endif
#if( /* {public Price}. */ 1 )

      // A non-positive value is permitted.
      public: double Price;

#endif

#if( /* {(public)} Instance default constructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {(public)} Instance copy constructor. */ 1 )

      // Could be autogenerated.
      // We don't need an instance move constructor.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This doesn't need to be virtual.

#endif
#if( /* {(public) operator =}. */ 1 )

      // Could be autogenerated.
      // We don't need a move assignment operator.

#endif

#if( /* {public Reset}. */ 1 )

      // This doesn't need to be virtual.

      public: void Reset();

#endif
#if( /* {public Equals}. */ 1 )

      // yg? We might also need {operator ==}.
      // yg? If I add one I would need to add one for inherited classes (and write comments).

// todo Rename to {Equal}?
      public: static bool Equals
         ( TQuantityAndPrice const & instance1,
           TQuantityAndPrice const & instance2
         );

#endif
#if( /* {public GetPriceIfAvailable}. */ 1 )

      // If {Price} is initialized with 0.0, prefer calling {GetPriceIfAvailable} instead of {Price}.

      public: double GetPriceIfAvailable() const;

#endif
   };
}
}

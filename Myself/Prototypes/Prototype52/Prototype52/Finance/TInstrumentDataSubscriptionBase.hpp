#pragma once

#include "../Common/ObjectModel/TDataSubscriptionBase.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
   // yg? Should we use the word "single instrument"?
   // The {TInstrumentDataSubscriptionBase<,>}, {Trading::TSingleInstrumentOrderBase<,>},
   // and {Trading::TOrderModificationRequestBase<,>} classes are similar and some related comments repeat.

   template
      < typename TDerivedDataType_,
         typename TInstrument_
      >
   class TInstrumentDataSubscriptionBase abstract :
      public ::Common::ObjectModel::TDataSubscriptionBase< TDerivedDataType_ >
   {
#if( /* {private Instrument_}. */ 1 )

      // The constructor does not initialize this field.
      private: TInstrument_ const * Instrument_;

#endif

#if( /* {protected} Instance default constructor. */ 1 )

      //

      protected: explicit TInstrumentDataSubscriptionBase();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This probably doesn't need to be {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Prepare}. */ 1 )

      // yg? Consider eliminating this method parameter and adding a {SetInstrument} method to be called before this one.
      // yg? But this refactoring is probably not urgent.
      // This probably doesn't need to be {virtual}.
      
      public: void Prepare
         ( TInstrument_ const & instrument1
         );

#endif

#if( /* {public Instrument}. */ 1 )

      //

      public: TInstrument_ const & Instrument() const;

#endif
   };
}

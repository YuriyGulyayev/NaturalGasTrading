#pragma once

#include "./TInstrumentBaseConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Finance
{
   // TODO 3 yg? This class is a placeholder. Some members should be moved here from derived classes.
   // TODO 3 yg? Move here: symbol.
   // TODO 3 yg? Possibly also move here: quantity increment, price increment.
   // The {TBrokerAdapter_} class may implement broker client, broker server, or both interfaces, among any others.

   template
      < typename TBrokerAdapter_
      >
   class TInstrumentBase abstract
   {
#if( /* {private BrokerAdapter_}. */ 1 )

      // This instrument belongs to this broker.
      // The constructor does not initialize this field.
      private: TBrokerAdapter_ * BrokerAdapter_;

#endif

#if( /* {protected} Instance default constructor. */ 1 )

      //

      protected: explicit TInstrumentBase();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TInstrumentBase
         ( TInstrumentBase const & source
         );

#endif
#if( /* {protected} Instance constructor. */ 1 )

      //

      protected: explicit TInstrumentBase
         ( TInstrumentBaseConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This probably doesn't need to be {virtual}.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TInstrumentBase & operator =
         ( TInstrumentBase const & source
         );

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TInstrumentBaseConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( //TInstrumentBaseConfiguration && configuration1
         );

#endif
#if( /* {public Prepare}. */ 1 )

      // yg? Consider eliminating this method parameter and adding a {SetBrokerAdapter} method to be called before this one.
      // yg? But this refactoring is probably not urgent.
      // This probably doesn't need to be {virtual}.
      
      public: void Prepare
         ( TBrokerAdapter_ & brokerAdapter1
         );

#endif

#if( /* {public BrokerAdapter}. */ 1 )

      // This {const} method returns a non-{const} reference.

      public: TBrokerAdapter_ & BrokerAdapter() const;

#endif
   };
}

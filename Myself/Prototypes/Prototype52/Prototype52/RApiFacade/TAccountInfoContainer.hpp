#pragma once

#include "./TAccountInfoConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace RApiFacade
{
   // yg? Should this and related classes be nested in {TREngineAdapter}? Maybe not.

   class TAccountInfoContainer
   {
#if( /* {private AccountInfoConfiguration_}. */ 1 )

      //
      private: TAccountInfoConfiguration AccountInfoConfiguration_;

#endif
#if( /* {private AccountInfo_}. */ 1 )

      //
      private: ::RApi::AccountInfo AccountInfo_;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TAccountInfoContainer();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TAccountInfoContainer
         ( TAccountInfoContainer const & source
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TAccountInfoContainer & operator =
         ( TAccountInfoContainer const & source
         );

#endif

#if( /* {public Assign}. */ 1 )

      // It's safe to call this method multiple times.
      // Although we probably don't call it multiple times any more.

      public: void Assign
         ( ::RApi::AccountInfo const & accountInfo1
         );

#endif
#if( /* {public AccountInfo}. */ 1 )

      //

      public: ::RApi::AccountInfo const & AccountInfo() const;

#endif
   };
}

#pragma once

//#include "./.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace RApiFacade
{
   // See the config file for more info.
   // This doesn't contain the {pContext} and {pAdmCallbacks} parameters as those can't come from a config file.

   class TREngineParamsConfiguration
   {
#if( /* {public sAppName}. */ 1 )

      //
      public: ::std::string sAppName;

#endif
#if( /* {public sAppVersion}. */ 1 )

      //
      public: ::std::string sAppVersion;

#endif
#if( /* {public sAdmCnnctPt}. */ 1 )

      //
      public: ::std::string sAdmCnnctPt;

#endif
#if( /* {public sLogFilePath}. */ 1 )

      //
      public: ::std::string sLogFilePath;

#endif
#if( /* {public EnvironmentVariables}. */ 1 )

      // yg? See {envp} comment.
      public: ::std::vector< ::std::string > EnvironmentVariables;

#endif
#if( /* {public envp}. */ 1 )

      // Ends with a {nullptr}.
      // yg? Consider moving {EnvironmentVariables} and {envp} to a separate class.
      public: ::std::vector< char const * > envp;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TREngineParamsConfiguration();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TREngineParamsConfiguration
         ( TREngineParamsConfiguration const & source
         );

#endif
#if( /* {public} Instance move constructor. */ 1 )

      //

      public: TREngineParamsConfiguration
         ( TREngineParamsConfiguration && source
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TREngineParamsConfiguration & operator =
         ( TREngineParamsConfiguration const & source
         );

#endif
#if( /* {public operator =}. */ 1 )

      //

      public: TREngineParamsConfiguration & operator =
         ( TREngineParamsConfiguration && source
         );

#endif

#if( /* {public Assign}. */ 1 )

      // yg? Should this be named {Move}?

      public: void Assign
         ( TREngineParamsConfiguration && source
         );

#endif
#if( /* //{public Swap}. */ 1 )

      //// yg? It would be easier to rely on the autogenerated copy constructor and copy assignment operator but {envp} won't be copied correctly.
      //// yg? Would it be more correct to make this method a non-member?
      //// yg? Should this specify that this doesn't throw exceptions? {::std::basic_string::swap} doesn't.
      //
      //public: void Swap
      //   ( TREngineParamsConfiguration & anotherInstance
      //   );

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.

      public: void Validate() const;

#endif
   };
}

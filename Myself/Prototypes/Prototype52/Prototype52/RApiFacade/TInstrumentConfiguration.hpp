#pragma once

#include "../Finance/TInstrumentBaseConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace RApiFacade
{
   // See the config file for more info.

   class TInstrumentConfiguration :
      public ::Finance::TInstrumentBaseConfiguration
   {
#if( /* {public Symbol}. */ 1 )

      //
      public: ::std::string Symbol;

#endif
#if( /* {public ExchangeAbbreviation}. */ 1 )

      //
      public: ::std::string ExchangeAbbreviation;

#endif
#if( /* {public QuantityIncrementMinLimit}. */ 1 )

      //
      public: double QuantityIncrementMinLimit;

#endif
#if( /* {public PriceIncrementMinLimit}. */ 1 )

      // yg? The {TInstrumentConfigurationHelpers::ExtractConfiguration} method initializes this field with 0.0.
      public: double PriceIncrementMinLimit;

#endif
#if( /* {public TradeRouteName}. */ 1 )

      //
      public: ::std::string TradeRouteName;

#endif

#if( /* {(public)} Instance default constructor. */ 1 )

      // Could be autogenerated.

      //public: explicit TInstrumentConfiguration();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This probably doesn't need to be {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* //{public Initialize}. */ 1 )

      ////
      //
      //public: void Initialize();

#endif
#if( /* //{private DoInitialize}. */ 1 )

      ////
      //
      //private: void DoInitialize();

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.

      public: void Validate() const;

#endif
   };
}

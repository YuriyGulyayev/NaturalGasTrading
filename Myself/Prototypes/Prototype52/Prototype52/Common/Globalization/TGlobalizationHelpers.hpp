#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace Globalization
{
   //

   class TGlobalizationHelpers abstract sealed
   {
#if( /* {public CInvariantLocale}. */ 1 )

      // yg? Is the data type of this field standard? The {::_create_locale} function is probably not. Revisit this on Linux.
      // yg? This is declared {const} so we don't need an accessor method to get this field.
      // yg? Should this be moved to a helper class related to text or data formatting.
      public: static ::_locale_t const CInvariantLocale;

#endif
#if( /* //{public CPlusPlusInvariantLocale}. */ 1 )

      // We might need an {::std::locale}.

#endif

#if( /* //{(private)} Instance default constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif
   };
}
}

#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace Threading
{
   // {TThread_} should be the {::Poco::Thread} class or its subclass.
   // yg? I believe I reviewed the {::Poco::Thread} class code and found that it really needs this protection but this should be revisited.
   // TODO 3 yg? We should use a standard C++ library thread.
   // yg? Consider renaming this to {DestructionSafeThread}. Bad idea. Maybe {RecyclingSafeThread}?

   template
      < typename TThread_
      >
   class TDisposalSafeThread :
      public TThread_
   {
#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TDisposalSafeThread();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {public} Instance constructor. */ 1 )

      // yg? We might need an overload accepting an rvalue reference.

      public: explicit TDisposalSafeThread
         ( ::std::string const & name
         );

#endif
#if( /* {public} Instance destructor. */ 1 )

      // yg? This probably doesn't need to be {virtual}.

      public: ~TDisposalSafeThread();

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif
   };
}
}

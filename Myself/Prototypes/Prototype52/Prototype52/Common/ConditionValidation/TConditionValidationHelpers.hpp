#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{

// yg? Consider eliminating this namespace and moving classes in it elsewhere.
namespace ConditionValidation

{
   //

   class TConditionValidationHelpers abstract sealed
   {
#if( /* //{(private)} Instance default constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* //{public ValidateValueLessThan}. */ 1 )

      // I commented out this for now.
      // {isErrorCritical} is lame.
      // Can I provide specializations of this template for different {TException1}?

      //// Validates that {value1 < value2}.
      //// Othwise throws an exception.
      //// yg? The {isErrorCritical} parameter should really be an error severity code.
      //// yg? We might need an overload that accepts lvalue or rvalue references. Or better use Boost Call Traits.
      //
      //public:
      //   template
      //      < typename TValue1, <<<this should end with a {_}.
      //         typename TException1 <<<this should end with a {_}.
      //         // yg? bool isErrorCritical
      //      >
      //   static void ValidateValueLessThan
      //      ( TValue1 value1,
      //        TValue1 value2,
      //        bool isErrorCritical
      //      );

#endif
   };
}
}

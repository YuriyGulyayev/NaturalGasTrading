#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace Diagnostics
{
   //

   class TDiagnosticsHelpers abstract sealed
   {
#if( /* //{(private)} Instance default constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public DummyMethod}. */ 1 )

   #if( _MSC_VER != 1600 )
      #error yg?? Do we still need this?
   #endif

      // Call this method from an otherwise empty block to make it possible to place a breakpoint on the block.

      public: static void DummyMethod();

#endif
#if( /* {public DummyMethodWithBreakPoint}. */ 1 )

      // To improve debugger performance you can place a breakpoint in this method
      // and call this method at where you want to place a breakpoint.
      // If this method is to be called near a logging it's recommended to call it after the logging.

      public: static void DummyMethodWithBreakPoint();

#endif
   };
}
}

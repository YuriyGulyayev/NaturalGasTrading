#pragma once

#include "./TCheapMovingAverageCalculatorConfiguration.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace Math
{
   //

   class TCheapMovingAverageCalculator
   {
#if( /* {private Factor2_}. */ 1 )

      //
      private: double Factor2_;

#endif

#if( /* {private CheapMovingAverage_}. */ 1 )

      //
      private: double CheapMovingAverage_;

#endif
#if( /* {private UpdateCounter_}. */ 1 )

      // yg? It could be an unnecessary overhead to maintain this.
      // Assuming this will not overflow.
      private: ::Poco::Int64 UpdateCounter_;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TCheapMovingAverageCalculator();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TCheapMovingAverageCalculator
         ( TCheapMovingAverageCalculator const & source
         );

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TCheapMovingAverageCalculator
         ( TCheapMovingAverageCalculatorConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This probably doesn't need to be {virtual}.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TCheapMovingAverageCalculator & operator =
         ( TCheapMovingAverageCalculator const & source
         );

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TCheapMovingAverageCalculatorConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( TCheapMovingAverageCalculatorConfiguration && configuration1
         );

#endif
#if( /* {public Reset}. */ 1 )

      //

      public: void Reset();

#endif
#if( /* {private DoReset}. */ 1 )

      //

      private: void DoReset();

#endif

#if( /* {public Update}. */ 1 )

      //

      public: void Update
         ( double value1
         );

#endif

#if( /* {public CheapMovingAverage}. */ 1 )

      //

      public: double CheapMovingAverage() const;

#endif
#if( /* {public UpdateCounter}. */ 1 )

      //

      public: ::Poco::Int64 UpdateCounter() const;

#endif
   };
}
}

#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace Math
{
   // See the config file for more info.

   class TCheapMovingAverageCalculatorConfiguration
   {
#if( /* {public Factor2}. */ 1 )

      //
      public: double Factor2;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TCheapMovingAverageCalculatorConfiguration();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TCheapMovingAverageCalculatorConfiguration
         ( TCheapMovingAverageCalculatorConfiguration const & source
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TCheapMovingAverageCalculatorConfiguration & operator =
         ( TCheapMovingAverageCalculatorConfiguration const & source
         );

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.

      public: void Validate() const;

#endif
   };
}
}

#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace ObjectModel
{
   // Base class of "data subscriptions".
   // {TDerivedDataType_} is a direct or indirect subclass and it should be marked {sealed}.
   // yg? POCO supports the observer pattern. Can it be helpful?
   // yg? Check out how I implemented subscriptions in the Kris Brady's app.
   // yg? Consider renaming {TDerivedDataType_} to {TDerived_}, {TDerivedDataSubscription_}, or {TDataDerivedSubscription_}.
   //
   // yg? A derived class might in addition need the following features:
   // yg? 1. A member state code and/or an event to tell the subscribers if the subscription initiation has (un)successfully completed.
   // yg?     The state could be: {Inactive}, {Activating}, {Active}, {Deactivating}.
   // yg? 2. A possibility to notify subscribers that the data flow has been interrupted/restored.
   // yg? 3. Polymorphysm (including a virtual destructor).
   // yg? I don't want to make some {TDataSubscriptionBase} methods including destructor virtual because a variable of data type
   // yg? {TDataSubscriptionBase<> *} should really never be passed to client code for any purpose including {delete}ion.
   //
   // yg? We might need the possibility of {TDerivedDataType_} to be {const}.
   // yg? A possible way to implement this:
   // yg? 1. Make {OnReceivedData} {private} and use {TDerivedDataType_ const} for its template parameter. We might need
   // yg?     {::std::add_const< TDerivedDataType_ >}. Even if not write a comment.
   // yg? 2. Add 2 couples of methods to add and remove a delagate. One couple is {const} and another is not.
   // yg?     The 1st couple accepts a delegate that accepts a {TDerivedDataType_ const &}. But delegate argument is actually
   // yg?     a reference to pointer, so the reality will be a bit different.
   // yg?     The 2nd couple accepts a delegate that accepts an {::std::remove_const< TDerivedDataType_ > &} and internally
   // yg?     {reinterpret_cast}s the delegate to the one that accepts a {TDerivedDataType_ const &}. Try {static_cast} first
   // yg?     but it would probably not complile.

   template
      < typename TDerivedDataType_
      >
   class TDataSubscriptionBase abstract
   {
#if( /* {public OnReceivedData}. */ 1 )

   #if( POCO_VERSION != 0x01040601 )
      #error yg?? Verify the validity of the following comment.
   #endif
      // yg? We pass a reference to pointer to sender in place of event args.
      // yg? The {TArgs} type parameter must have a public copy constructor and/or copy assignment operator as otherwise the
      // yg? {::Poco::AbstractEvent::executeAsyncImpl} method doesn't compile. So we can't use {TArgs = TDerivedDataType_}.
      // yg? Nor we can use {TArgs = TDerivedDataType_ &}.
      // yg? But keep in mind that the asyncronuous invocation (which we currently don't use) requires the pointer to stay valid
      // yg? until all listeners receive the event.
      // yg? Consider specifying data type of this field by a template parameter.
      // yg? Consider making this {mutable} and {RaiseOnReceivedData} {const}.
      // yg? I would have to make them {const} to support {const} subscription objects.
// TODO They duplicate the whole invocation list when raising an event. Maybe fix this in their code. Or submit as an issue.
      public: ::Poco::BasicEvent< TDerivedDataType_ *, ::Poco::NullMutex > OnReceivedData;

#endif

#if( /* {protected} Instance default constructor. */ 1 )

      //

      protected: explicit TDataSubscriptionBase();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TDataSubscriptionBase
         ( TDataSubscriptionBase const & source
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // yg? As mentioned in a whole class comment, this probably should not be {virtual}?

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TDataSubscriptionBase & operator =
         ( TDataSubscriptionBase const & source
         );

#endif

#if( /* {public RaiseOnReceivedData}. */ 1 )

      //

      public: void RaiseOnReceivedData();

#endif
   };
}
}

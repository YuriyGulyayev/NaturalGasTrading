#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace ObjectModel
{
   //

   class TReferenceCounterHelpers abstract sealed
   {
#if( /* //{(private)} Instance default constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public WaitUntilReferencesReleased}. */ 1 )

      // Waits until {referenceCounter1.referenceCount() <= referenceCounter1ValueMaxLimit}.
      // yg? This implementation serves only our immediate needs.

      public:
         template
            < typename TReferenceCounter_
            >
         static void WaitUntilReferencesReleased
            ( TReferenceCounter_ const & referenceCounter1,
              int referenceCounter1ValueMaxLimit
            );

#endif
   };
}
}

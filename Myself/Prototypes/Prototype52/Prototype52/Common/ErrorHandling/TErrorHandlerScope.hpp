#pragma once

//#include "./.hpp"

#include "../SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Common
{
namespace ErrorHandling
{
   // --not any more-- The caller must call {::Poco::Net::initializeNetwork} to make it possible to sleep with {::select}.

   class TErrorHandlerScope
   {
#if( /* {private OldErrorHandler_}. */ 1 )

      // yg? Should this be named {SubstitutedErrorHandler_}.
      private: ::Poco::ErrorHandler * OldErrorHandler_;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TErrorHandlerScope();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TErrorHandlerScope
         ( TErrorHandlerScope const & source
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // yg? Restoring error handler in the destructor is not supported.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TErrorHandlerScope & operator =
         ( TErrorHandlerScope const & source
         );

#endif

#if( /* {public SetErrorHandler}. */ 1 )

      // yg? Setting error handler in a constructor is not supported.

      public: void SetErrorHandler();

#endif
#if( /* {public RestoreErrorHandler}. */ 1 )

      // The caller shall call this method explicitly after calling {SetErrorHandler}.
      // yg? Restoring error handler in the destructor is not supported.

      public: void RestoreErrorHandler();

#endif
   };
}
}

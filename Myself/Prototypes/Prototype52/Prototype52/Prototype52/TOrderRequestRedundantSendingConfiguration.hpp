#pragma once

//#include "./.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // See the config file for more info.

//TODO add a comment to config:
//TODO This specifies when to send a redundant order request when a message arrives from a peer that indicates that the peer sent an order request.
//TODO This makes sense if there is a chance that the request will reach the brokerage sooner.

//TODO An old comment that is now BS but phrase it better and preserve.
//TODO This logic is flawed. If a message gets forwarded over a chain of peers, an order request from the 1st peer in the chain will likely reach the brokerage first. A better logic might involve the configuration of relative costs of data transfer between specific peers and from each peer to the brokerage. Absolute date-time on involved peers might need to be factored. Maybe also some sort of unadjusted date-time that peers send to each other and to the brokerage.

   class TOrderRequestRedundantSendingConfiguration
   {
#if( /* {public PeersId}. */ 1 )

      // yg? It's probably not going to be helpful to sort this and perform binary search but things can change if more peers participate.
      public: ::std::string PeersId;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TOrderRequestRedundantSendingConfiguration();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TOrderRequestRedundantSendingConfiguration
         ( TOrderRequestRedundantSendingConfiguration const & source
         );

#endif
#if( /* {public} Instance move constructor. */ 1 )

      //

      public: TOrderRequestRedundantSendingConfiguration
         ( TOrderRequestRedundantSendingConfiguration && source
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TOrderRequestRedundantSendingConfiguration & operator =
         ( TOrderRequestRedundantSendingConfiguration const & source
         );

#endif
#if( /* {public operator =}. */ 1 )

      //

      public: TOrderRequestRedundantSendingConfiguration & operator =
         ( TOrderRequestRedundantSendingConfiguration && source
         );

#endif

#if( /* {public Assign}. */ 1 )

      // yg? Should this be named {Move}?

      public: void Assign
         ( TOrderRequestRedundantSendingConfiguration && source
         );

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.

      public: void Validate() const;

#endif
   };
}

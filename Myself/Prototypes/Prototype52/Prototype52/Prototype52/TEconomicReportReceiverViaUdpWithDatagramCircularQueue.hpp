#pragma once

//#include "./.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // {TEconomicReportReceiverViaUdp_} should be {TEconomicReportReceiverViaUdp<>} or its subclass.
   // An example when circular queueing of datagrams is needed is
   // when a message that arrives later is more likely to contain economic report data.
   // It's configured by the {SIO_ENABLE_CIRCULAR_QUEUEING} opcode.
   // This setting, along with the time-to-live feature, probably results in the possibility of some pending datagrams being dropped
   // and replaced with bigger ones at any time, which in turn makes it impossible to guarantee that
   // the {FIONREAD} result is greather than or equal the 1st pending datagram,
   // which in turn can cause {::recv} to fail and drop the 1st pending datagram if it's bigger than the supplied buffer.
   //
   // Visible universe.
   //    {TEconomicReportReceiverViaUdp<>} or its subclass.
   //       Subclass.
   //    {TEconomicReportReceiverViaUdpConfiguration} or its subclass.
   //    //{PeerStrategyBaseModeCode_}.
   //    //   Use.
   //    //{Result}.
   //    //   Update.
   //       This is actually an "active" object.
   //    //{EconomicReportReceptionTimeStampMilliseconds_}.
   //    //   Update.
   //       It remains uninitialized.
   //    //{OutcomeCode_}.
   //    //   Update.
   //    {Socket_}.
   //       Call its methods.
   //    Instance constructors -- base.
   //       Hide, possibly implicitly. Call, possibly implicitly.
   //       TODO 3 yg? These should be inherited in C++1x.
   //    Instance destructor -- base.
   //       Override, possibly implicitly. Call, possibly implicitly.
   //    //{Initialize} -- base.
   //    //   Hide, call.
   //    //{DoTryRun} -- base.
   //    //   Override, call.
   //       An override is normally needed to reset {Result} before calling the base.
   //    {ConfigureSocket} -- base.
   //       Override, call.

   template
      < typename TEconomicReportReceiverViaUdp_
      >
   class TEconomicReportReceiverViaUdpWithDatagramCircularQueue :
      public TEconomicReportReceiverViaUdp_
   {
#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TEconomicReportReceiverViaUdpWithDatagramCircularQueue();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public:
         template
            < typename TEconomicReportReceiverViaUdpConfiguration_
            >
         explicit TEconomicReportReceiverViaUdpWithDatagramCircularQueue
            ( TEconomicReportReceiverViaUdpConfiguration_ && configuration1
            );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {protected ConfigureSocket}. */ 1 )

      //
      
      protected: virtual void ConfigureSocket() override;

#endif
   };
}

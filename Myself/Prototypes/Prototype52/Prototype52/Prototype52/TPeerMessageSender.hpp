#pragma once

#include "../Common/DataStructures/TPair.hpp"
#include "./TPeerMessageSenderConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // yg? Can I eliminate the word "peer" and move this class to a more common namespace? Possibly use the word "UDP".
   // yg? But I might want to add some strategy specific functionality.

   // Visible universe.
   //    {::Poco::Net::DatagramSocket}.
   //    {TPeerConfiguration}.
   //    {TPeerMessageSenderConfiguration}.

   class TPeerMessageSender
   {
#if( /* {private PeersConfiguration_}. */ 1 )

      // This collection may be empty.
      // Storing the configuration object as is.
      private: ::std::vector< TPeerConfiguration > PeersConfiguration_;

#endif

#if( /* {private Sockets_}. */ 1 )

      //
      private: ::std::vector< ::Common::DataStructures::TPair< char, ::Poco::Net::DatagramSocket > > Sockets_;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TPeerMessageSender();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TPeerMessageSender
         ( TPeerMessageSender const & source
         );

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TPeerMessageSender
         ( TPeerMessageSenderConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TPeerMessageSender & operator =
         ( TPeerMessageSender const & source
         );

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TPeerMessageSenderConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( //TPeerMessageSenderConfiguration && configuration1
         );

#endif
#if( /* {public Prepare}. */ 1 )

      //

      public: void Prepare();

#endif

#if( /* {public TrySendPeerMessage}. */ 1 )

      //
      
      public: void TrySendPeerMessage
         ( char const * peerMessage,
           int peerMessageLength
         );

#endif
#if( /* {public TrySendPeerMessage}. */ 1 )

      //
      
      public: void TrySendPeerMessage
         ( char const * peerMessage,
           int peerMessageLength,
           char peerIdToSkip
         );

#endif
   };
}

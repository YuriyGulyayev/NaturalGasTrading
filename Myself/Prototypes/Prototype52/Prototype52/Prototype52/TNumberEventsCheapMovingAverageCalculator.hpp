#pragma once

#include "../Common/Math/TCheapMovingAverageCalculator.hpp"
#include "./TNumberEventsCheapMovingAverageCalculatorConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // yg? This class belongs to a more common namespace.

   class TNumberEventsCheapMovingAverageCalculator :
      public ::Common::Math::TCheapMovingAverageCalculator
   {
#if( /* {private EventSinceLastUpdateCounter_}. */ 1 )

      // Assuming this will not overflow.
      // yg? Consider making data type of this field a template parameter. This would allow to use a longer integer or {double}.
      // yg? In that case the class should be renamed to something more generic.
      private: int EventSinceLastUpdateCounter_;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TNumberEventsCheapMovingAverageCalculator();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TNumberEventsCheapMovingAverageCalculator
         ( TNumberEventsCheapMovingAverageCalculatorConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // This doesn't need to be virtual.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TNumberEventsCheapMovingAverageCalculatorConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( //TNumberEventsCheapMovingAverageCalculatorConfiguration && configuration1
         );

#endif
#if( /* {public Reset}. */ 1 )

      // This method hides an inherited one.
      // This doesn't need to be virtual.

      public: void Reset();

#endif
#if( /* {private DoReset}. */ 1 )

      //

      private: void DoReset();

#endif

#if( /* {public RegisterEvent}. */ 1 )

      // If this method is called too many times in a row an overflow will occur.

      public: void RegisterEvent();

#endif
#if( /* {public EventSinceLastUpdateCounter}. */ 1 )

      //

      public: int EventSinceLastUpdateCounter() const;

#endif
#if( /* {public Update}. */ 1 )

      // This method hides an inherited one with a different signature.
      // This doesn't need to be virtual.
      // If this and the inherited method are made {virtual} we would end up with overloaded virtual methods.

      public: void Update();

#endif
   };
}

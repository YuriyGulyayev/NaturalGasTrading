#pragma once

#include "./TNewsHubHelpers.hpp"
#include "./TEconomicReportDownloaderWithTcpParallelRequestsBase.hpp"
#include "./TPetroleumStatusReportDownloaderConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // yg? Name of this class and/or namespace should specify what jurisdiction and authority this economic report comes from.
   //
   // Visible universe.
   //    {::_atof_l}.
   //       Call.
   //    {::Common::Math::TMathHelpers}.
   //    {TNewsHubHelpers}.
   //    {TEconomicReportDownloaderWithTcpParallelRequestsBase< int >}.
   //       Subclass.
   //    {TPetroleumStatusReportDownloaderConfiguration}.
   //    //{PeerStrategyBaseModeCode_}.
   //    //   Use.
   //    {Result}.
   //       Use, update.
   //    {EconomicReportReceptionTimeStampMilliseconds_}.
   //       Update.
   //    {OutcomeCode_}.
   //       Use, update.
   //    {TryCreateNewsHubMessage} -- base.
   //       Override.
   //    {SafeGetEconomicReportReceptionDateTimeStampOffsetMilliseconds()}.
   //       Use.
   //    {WarmUpCounter_}.
   //       Use.
   //    Instance constructors -- base.
   //       Hide, possibly implicitly. Call, possibly implicitly.
   //    Instance destructor -- base.
   //       Override, possibly implicitly. Call, possibly implicitly.
   //    {Initialize} -- base.
   //       Hide, call.
   //    //{Prepare} -- base.
   //    //   Override, call.
   //    {DoTryRun} -- base.
   //       Override, call.
   //    {ConfigureSocket} -- base.
   //       Override, call.
   //    {GetResponseContentForWarmUp} -- base.
   //       Implement.
   //    {TryParseResponse} -- base.
   //       Implement.
   //    {LogActivityReportHeader} -- base.
   //       Implement.

   class TPetroleumStatusReportDownloader :
      public TEconomicReportDownloaderWithTcpParallelRequestsBase< int >
   {
#if( /* {private TResponseContentLineParsingState_}. */ 1 )

      // We are happy with all the autogenerated methods and we don't need an instance move constructor or move assignment operator.

      private: class TResponseContentLineParsingState_
      {
         // For example: "\n\"Commercial (Excluding SPR)\",\"".
         // yg? Consider renaming this to {ResponseContentLineTitleText}. But then I would have to rename any {ResponseContent...},
         // yg? including the {TryParseResponse} method parameter. Maybe rename any {ResponseContent...} to {ResponseText...}.
         public: char const * ResponseContentLineTitle;

         //
         public: char const * ResponseContentLineTitleEnd;

         //
         public: int ResponseContentLineTitleLength;

         // Actual offset of {ResponseContentLineTitle} in response text. We will log it.
         // This value can but is not guaranteed to be valid when all response parsings failed.
         public: int ResponseContentLineTitleOffset;

         // Current parsing offset.
         public: int ResponseContentCurrentOffset;

         //
         public: int Value1Multiplier;

         //// The number extracted from economic report.
         //public: double Value1;

         // The number extracted from economic report, multiplied by
         // {TPetroleumStatusReportDownloader::ResponseContentParsingFactor8_}, and rounded to an integer.
         public: int Value1;
      };

#endif

#if( /* //{private CommercialCrudeOilStocksQuantityDifferenceMultiplier_}. */ 1 )

      // yg? Here and elsewhere, should we use the word "inventory" instead of "stocks"? Same applies to the log parser.
      ////private: double CommercialCrudeOilStocksQuantityDifferenceMultiplier_;
      //private: int CommercialCrudeOilStocksQuantityDifferenceMultiplier_;

#endif
#if( /* //{private MotorGasolineStocksQuantityDifferenceMultiplier_}. */ 1 )

      //
      ////private: double MotorGasolineStocksQuantityDifferenceMultiplier_;
      //private: int MotorGasolineStocksQuantityDifferenceMultiplier_;

#endif
#if( /* //{private DistillateFuelOilStocksQuantityDifferenceMultiplier_}. */ 1 )

      //
      ////private: double DistillateFuelOilStocksQuantityDifferenceMultiplier_;
      //private: int DistillateFuelOilStocksQuantityDifferenceMultiplier_;

#endif

#if( /* {private SocketDataBufferInitialCapacity_}. */ 1 )

      // For maximum performance, this should be greather than or equal any response length, including the "New Release Pending".
      private: static int const SocketDataBufferInitialCapacity_ = 4 * 1024;

#endif
#if( /* {private SocketDataBufferCapacityMaxLimit_}. */ 1 )

      // We can exceed this by a little because we can append text to the data buffer.
      private: static int const SocketDataBufferCapacityMaxLimit_ = SocketDataBufferInitialCapacity_ * 2;

#endif

#if( /* {private ResponseContentParsingFactor1_}. */ 1 )

      // Offset from which to begin searching for "\n\"Commercial (Excluding SPR)\",\"".
      // Actual offset of that substring is close to 464.
      // 464 - 32 == 432
      // TODO 3 yg? Revisit these magic numbers, also in factors 2, 3, 6.
      private: static int const ResponseContentParsingFactor1_ = 432;

#endif
#if( /* {private ResponseContentParsingFactor2_}. */ 1 )

      // Offset from which to begin searching for "\n\"Total Motor Gasoline\",\"".
      // Actual offset of that substring is close to 1215.
      // 1215 - 32 - 16 == 1167
      private: static int const ResponseContentParsingFactor2_ = 1167;

#endif
#if( /* {private ResponseContentParsingFactor3_}. */ 1 )

      // Offset from which to begin searching for "\n\"Distillate Fuel Oil\",\"".
      // Actual offset of that substring is close to 1719.
      // 1719 - 32 - 16 - 16 == 1655
      private: static int const ResponseContentParsingFactor3_ = 1655;

#endif
#if( /* {private ResponseContentParsingFactor6_}. */ 1 )

      // After we found a line title such as "\n\"Commercial (Excluding SPR)\",\"", if no sufficient data was received yet,
      // next time we will start searching from the found position minus this margin. This should protect us from
      // possible different HTTP header lengths in different responses.
      private: static int const ResponseContentParsingFactor6_ = 8;

#endif
#if( /* {private ResponseContentParsingFactor8_}. */ 1 )

      // We multiply each of the 3 extracted values by this number and round the result to an integer.
      private: static int const ResponseContentParsingFactor8_ = 1000;

#endif

#if( /* {private ResponseContentLinesParsingState_}. */ 1 )

      //
      private: TResponseContentLineParsingState_ ResponseContentLinesParsingState_[ 3U ];

#endif
#if( /* {private ResponseContentCurrentLineParsingState_}. */ 1 )

      // The constructor does not initialize this field.
      private: TResponseContentLineParsingState_ * ResponseContentCurrentLineParsingState_;

#endif

#if( /* {private NewsHubMessageText_}. */ 1 )

      //
      private: ::std::string NewsHubMessageText_;

#endif

#if( /* {private ConstantString26Length_}. */ 1 )

      // yg? {TNaturalGasStorageReportDownloader::ConstantString26Length_} comments apply.
      private: static int const ConstantString26Length_ = 1776;

#endif
#if( /* {private ConstantStrings26AsArray_}. */ 1 )

      //
      private: static char const ConstantStrings26AsArray_[ 3U ][ static_cast< unsigned int >( ConstantString26Length_ + 1 ) ];

#endif
#if( /* {private ConstantString34AsArray_}. */ 1 )

      //
      private: static char const ConstantString34AsArray_[];

      //
      private: static void ConstantString34StaticAssertion();

#endif
#if( /* {private ConstantString34Length_}. */ 1 )

      //
      private: static int const ConstantString34Length_ = 13;

#endif
#if( /* {private ConstantString36AsArray_}. */ 1 )

      //
      private: static char const ConstantString36AsArray_[];

      //
      private: static void ConstantString36StaticAssertion();

#endif
#if( /* {private ConstantString36Length_}. */ 1 )

      //
      private: static int const ConstantString36Length_ = 31;

#endif
#if( /* {private ConstantString37AsArray_}. */ 1 )

      //
      private: static char const ConstantString37AsArray_[];

      //
      private: static void ConstantString37StaticAssertion();

#endif
#if( /* {private ConstantString37Length_}. */ 1 )

      //
      private: static int const ConstantString37Length_ = 25;

#endif
#if( /* {private ConstantString38AsArray_}. */ 1 )

      //
      private: static char const ConstantString38AsArray_[];

      //
      private: static void ConstantString38StaticAssertion();

#endif
#if( /* {private ConstantString38Length_}. */ 1 )

      //
      private: static int const ConstantString38Length_ = 24;

#endif
#if( /* {private ConstantString44AsArray_}. */ 1 )

      // yg? See {TNaturalGasStorageReportDownloader::ConstantString44AsArray_} comment.
      private: static char const ConstantString44AsArray_[];

      //
      private: static void ConstantString44StaticAssertion();

#endif
#if( /* {private ConstantString44Length_}. */ 1 )

      //
      private: static int const ConstantString44Length_ = TNewsHubHelpers::MessageTextHeaderLength + 117;

#endif
#if( /* {private ConstantString44Value1Offset1_}. */ 1 )

      //
      private: static int const ConstantString44Value1Offset1_ = 36;

#endif
#if( /* {private ConstantString44Value1Offset2_}. */ 1 )

      //
      private: static int const ConstantString44Value1Offset2_ = 75;

#endif
#if( /* {private ConstantString44Value1Offset3_}. */ 1 )

      //
      private: static int const ConstantString44Value1Offset3_ = 117;

#endif
#if( /* {private ConstantString44Value1Length_}. */ 1 )

      //
      private: static int const ConstantString44Value1Length_ = 8;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TPetroleumStatusReportDownloader();

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TPetroleumStatusReportDownloader
         ( TPetroleumStatusReportDownloaderConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TPetroleumStatusReportDownloaderConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( TPetroleumStatusReportDownloaderConfiguration && configuration1
         );

#endif
#if( /* {protected DoTryRun}. */ 1 )

      //

      protected: virtual /*bool*/ void DoTryRun() override;

#endif

#if( /* {public TryCreateNewsHubMessage}. */ 1 )

      //

      public: virtual ::std::string const * TryCreateNewsHubMessage() override;

#endif
#if( /* {private TryInsertValueIntoNewsHubMessageText}. */ 1 )

      //
      
      private: bool TryInsertValueIntoNewsHubMessageText
         ( int value1,
           int value1Offset
         );

#endif

#if( /* {protected ConfigureSocket}. */ 1 )

      //

      protected: virtual void ConfigureSocket
         ( ::Common::Networking::TStreamSocketWithDataBuffer & socket1
         ) const override;

#endif
#if( /* {protected GetResponseContentForWarmUp}. */ 1 )

      //

      protected: virtual ::Common::DataStructures::TDataBuffer GetResponseContentForWarmUp() const override;

#endif
#if( /* {protected TryParseResponse}. */ 1 )

      //
      
      protected: virtual unsigned int TryParseResponse
         ( ::Common::DataStructures::TDataBuffer const & responseContent
         ) override;

#endif
#if( /* {private TryParseResponseContentLine}. */ 1 )

      // Returns the same as {TryParseResponse}.
      
      private: unsigned int TryParseResponseContentLine
         ( ::Common::DataStructures::TDataBuffer const & responseContent
         );

#endif

#if( /* {protected LogActivityReportHeader}. */ 1 )

      //
      
      protected: virtual void LogActivityReportHeader() const override;

#endif
   };
}

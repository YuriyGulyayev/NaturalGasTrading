#pragma once

#include "../Common/Time/TDateTimeKeeperConfiguration.hpp"
#include "./TFileSystemCacheFlusherConfiguration.hpp"
#include "./TEconomicReportReceiverFactoryConfiguration.hpp"
#include "./TPeerMessageSenderConfiguration.hpp"
#include "./TEconomicReportReceiverViaUdpConfiguration.hpp"
#include "./TStrategyBaseConfiguration.hpp"
#include "./TUntradableConditionConfiguration.hpp"
#include "./TOrderRequestRedundantSendingConfiguration.hpp"
#include "./TPeerStrategyBaseModeCode.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // See the config file for more info.

   class TPeerStrategyBaseConfiguration abstract :
      public TStrategyBaseConfiguration
   {
#if( /* {public ModeCode}. */ 1 )

      //
      public: TPeerStrategyBaseModeCode ModeCode;

#endif
#if( /* {public PeerId}. */ 1 )
   
      //
      public: char PeerId;
   
#endif
#if( /* {public EconomicReportReleaseTimeOfDayMilliseconds}. */ 1 )

      //
      public: int EconomicReportReleaseTimeOfDayMilliseconds;

#endif
#if( /* {public EconomicReportReleaseDateTimeTestOffsetMilliseconds}. */ 1 )

      //
//TODO I wrote a TODO in the strategy that this should be renamed
      public: int EconomicReportReleaseDateTimeTestOffsetMilliseconds;

#endif
#if( /* {public FileSystemCacheFlushing1TimeOffsetMilliseconds}. */ 1 )

      //
      public: int FileSystemCacheFlushing1TimeOffsetMilliseconds;

#endif
#if( /* {public FileSystemCacheFlushing2TimeOffsetMilliseconds}. */ 1 )

      //
      public: int FileSystemCacheFlushing2TimeOffsetMilliseconds;

#endif
#if( /* {public PeerMessageSendingWarmUp1TimeOffsetMilliseconds}. */ 1 )

      //
      public: int PeerMessageSendingWarmUp1TimeOffsetMilliseconds;

#endif
#if( /* {public PeerMessageSendingWarmUp2TimeOffsetMilliseconds}. */ 1 )

      //
      public: int PeerMessageSendingWarmUp2TimeOffsetMilliseconds;

#endif
#if( /* {public EntryOrdersModificationTimeOffsetMilliseconds}. */ 1 )

      //
      public: double EntryOrdersModificationTimeOffsetMilliseconds;

#endif
#if( /* {public TerminationTimeOffsetMilliseconds}. */ 1 )

      //
      public: int TerminationTimeOffsetMilliseconds;

#endif
#if( /* {public UntradableConditionConfiguration}. */ 1 )

      //
      public: TUntradableConditionConfiguration UntradableConditionConfiguration;

#endif
#if( /* {public OrderRequestRedundantSendingConfiguration}. */ 1 )

      //
      public: TOrderRequestRedundantSendingConfiguration OrderRequestRedundantSendingConfiguration;

#endif
#if( /* {public EconomicReportReceiverFactoryConfiguration}. */ 1 )

      //
      public: TEconomicReportReceiverFactoryConfiguration EconomicReportReceiverFactoryConfiguration;

#endif
#if( /* {public PeerStatePeerMessageSenderConfiguration}. */ 1 )

      //
      public: TPeerMessageSenderConfiguration PeerStatePeerMessageSenderConfiguration;

#endif
#if( /* {public PeerStatePeerMessageReceiverConfiguration}. */ 1 )

      //
      public: TEconomicReportReceiverViaUdpConfiguration PeerStatePeerMessageReceiverConfiguration;

#endif
#if( /* {public DateTimeKeeperConfiguration}. */ 1 )

      //
      public: ::Common::Time::TDateTimeKeeperConfiguration DateTimeKeeperConfiguration;

#endif
#if( /* {public FileSystemCacheFlusherConfiguration}. */ 1 )

      //
      public: TFileSystemCacheFlusherConfiguration FileSystemCacheFlusherConfiguration;

#endif

#if( /* {(protected)} Instance default constructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.
      // TODO 3 yg? If I implement this method I will need to make it {virtual}.

      public: void Validate() const;

#endif
   };
}

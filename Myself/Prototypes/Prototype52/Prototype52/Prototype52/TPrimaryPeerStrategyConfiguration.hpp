#pragma once

#include "./TNumberEventsCheapMovingAverageCalculatorConfiguration.hpp"
#include "./TPeerStrategyBaseConfiguration.hpp"
#include "./TPrimaryPeerStrategyPositionConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // See the config file for more info.

   class TPrimaryPeerStrategyConfiguration :
      public TPeerStrategyBaseConfiguration
   {
#if( /* {public Timer1TickIntervalMilliseconds}. */ 1 )

      //
      public: int Timer1TickIntervalMilliseconds;

#endif
#if( /* {public DataLoggingIntervalTimer1Ticks}. */ 1 )

      //
      public: int DataLoggingIntervalTimer1Ticks;

#endif
#if( /* {public NumberDataLastLoggingsOnTimer1TickToForce}. */ 1 )

      //
      public: int NumberDataLastLoggingsOnTimer1TickToForce;

#endif
#if( /* {public EntryOrdersModificationWarmUpTimeOffsetMilliseconds}. */ 1 )

      //
      public: int EntryOrdersModificationWarmUpTimeOffsetMilliseconds;

#endif
#if( /* {public EconomicReportReceptionTimeoutTimeSpanMilliseconds}. */ 1 )

      //
      public: int EconomicReportReceptionTimeoutTimeSpanMilliseconds;

#endif
#if( /* {public InstrumentDeepOutOfMoneyPriceFactor1}. */ 1 )

      //
      public: double InstrumentDeepOutOfMoneyPriceFactor1;

#endif
#if( /* {public PositionConfiguration}. */ 1 )

      //
      public: TPrimaryPeerStrategyPositionConfiguration PositionConfiguration;

#endif
#if( /* {public NumberInstrumentTradesCheapMovingAverageCalculatorConfiguration}. */ 1 )

      //
      public: TNumberEventsCheapMovingAverageCalculatorConfiguration NumberInstrumentTradesCheapMovingAverageCalculatorConfiguration;

#endif
#if( /* {public OrdersPeerMessageSenderConfiguration}. */ 1 )

      //
      public: TPeerMessageSenderConfiguration OrdersPeerMessageSenderConfiguration;

#endif
#if( /* {public PlannedAction1PeerMessageSenderConfiguration}. */ 1 )

      //
      public: TPeerMessageSenderConfiguration PlannedAction1PeerMessageSenderConfiguration;

#endif
#if( /* {public PlannedAction2PeerMessageSenderConfiguration}. */ 1 )

      //
      public: TPeerMessageSenderConfiguration PlannedAction2PeerMessageSenderConfiguration;

#endif

#if( /* {(public)} Instance default constructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.
      // TODO 3 yg? If I implement this method I will need to make it {virtual}.

      public: void Validate() const;

#endif
   };
}

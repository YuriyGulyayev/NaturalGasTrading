#pragma once

#include "./TStrategyBase.hpp"
#include "./TWarmUpStrategyConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // Visible universe.
   //    {::Common::ControlFlow::TOperationCancelledException}.
   //       TODO ?
   //    {::Common::Threading::TDisposalSafeThread}.
   //       TODO ? start a watchdog thread that will signal cancel token on timeout
   //    {TStrategyBase}.
   //       Subclass.
   //    {TWarmUpStrategyConfiguration}.
   //    {ThreadedActivityCancellationToken_}.
   //       TODO ?
   //    {REngineAdapter_}.
   //       Call its methods.
   //    Instance constructors -- base.
   //       Hide, possibly implicitly. Call, possibly implicitly.
   //    Instance destructor -- base.
   //       Override, possibly implicitly. Call, possibly implicitly.
   //    {Initialize} -- base.
   //       Hide, call.
   //    //{Prepare} -- base.
   //    //   Override, call.
   //    //{Start} -- base.
   //    //   Override, call.
   //    {Run} -- base.
   //       Implement.

//TODO All we really need is to send a market order. No need to subscribe for market data.
//TODO But we need to get a trigger report too.
//TODO Is it better to deduce current price from market order fill price?
//TODO Once I know the price I can send 20 stop-market orders on both sides and wait until one triggers.
//TODO Then cancel 1 order, a few orders, "any" orders, send a market order to close the position.

//TODO we also need a {TMarketDataSubscriptionOnlyStrategy} (name it better?).

   class TWarmUpStrategy :
      public TStrategyBase
   {
#if( /* //{(private)} Instance default constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TWarmUpStrategy
         ( ::Common::ControlFlow::TThreadedActivityCancellationToken & threadedActivityCancellationToken1
         );

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TWarmUpStrategy
         ( ::Common::ControlFlow::TThreadedActivityCancellationToken & threadedActivityCancellationToken1,
           TWarmUpStrategyConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TWarmUpStrategyConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( TWarmUpStrategyConfiguration && configuration1
         );

#endif
#if( /* {public Run}. */ 1 )

      //

      public: virtual void Run() override;

#endif
   };
}

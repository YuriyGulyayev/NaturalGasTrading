#pragma once

#include "./TPeerConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // See the config file for more info.

   class TPeerMessageSenderConfiguration
   {
#if( /* {public PeersConfiguration}. */ 1 )

      //
      public: ::std::vector< TPeerConfiguration > PeersConfiguration;

#endif

#if( /* {public} Instance default constructor. */ 1 )

      //

      public: explicit TPeerMessageSenderConfiguration();

#endif
#if( /* {private} Instance copy constructor. */ 1 )

      //

      private: explicit TPeerMessageSenderConfiguration
         ( TPeerMessageSenderConfiguration const & source
         );

#endif
#if( /* //{public} Instance move constructor. */ 1 )

      ////
      //
      //public: TPeerMessageSenderConfiguration
      //   ( TPeerMessageSenderConfiguration && source
      //   );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.

#endif
#if( /* {private operator =}. */ 1 )

      //

      private: TPeerMessageSenderConfiguration & operator =
         ( TPeerMessageSenderConfiguration const & source
         );

#endif
#if( /* //{public operator =}. */ 1 )

      ////
      //
      //public: TPeerMessageSenderConfiguration & operator =
      //   ( TPeerMessageSenderConfiguration && source
      //   );

#endif

#if( /* {public Validate}. */ 1 )

      // yg? This might need a parameter specifying configuration extraction state. Or better add a method with that parameter to the helpers.

      public: void Validate() const;

#endif
   };
}

#pragma once

#include "./TPeerStrategyBase.hpp"
#include "./TSecondaryPeerStrategyConfiguration.hpp"

#include "../Common/SourceCodeModel/IncrementHeaderInclusionBalance.hpp"

namespace Prototype52
{
   // Visible universe.
   //    {TPeerStrategyBase}.
   //       Subclass.
   //    {TSecondaryPeerStrategyConfiguration}.
   //    {REngineAdapter_}.
   //       Call its methods.
   //    Instance constructors -- base.
   //       Hide, possibly implicitly. Call, possibly implicitly.
   //    Instance destructor -- base.
   //       Override, possibly implicitly. Call, possibly implicitly.
   //    {Initialize} -- base.
   //       Hide, call.
   //    //{Prepare} -- base.
   //    //   Override, call.
   //    //{Start} -- base.
   //    //   Override, call.
   //    //{Run} -- base.
   //    //   Implement.
   //    {DoRun} -- base.
   //       Implement.

   class TSecondaryPeerStrategy :
      public TPeerStrategyBase
   {
#if( /* {private PositionConfiguration_}. */ 1 )

      // Storing the configuration object as is.
      private: TSecondaryPeerStrategyPositionConfiguration PositionConfiguration_;

#endif

#if( /* {private MayModifyEntryOrdersTowardsMoney_}. */ 1 )

      //
// TODO What if {false} arrives after some action taken when this was {true}? Probably do nothing as primary peer has already requested to cancel entry orders.
      private: bool MayModifyEntryOrdersTowardsMoney_;

#endif
#if( /* {private InstrumentBestBidPrice_}. */ 1 )

      // Valid only when {MayModifyEntryOrdersTowardsMoney_}.
      private: double InstrumentBestBidPrice_;
   
#endif
#if( /* {private InstrumentBestAskPrice_}. */ 1 )
   
      // See {InstrumentBestBidPrice_} comment.
      private: double InstrumentBestAskPrice_;
   
#endif
#if( /* {private InstrumentLastTradePrice_}. */ 1 )
   
      // See {InstrumentBestBidPrice_} comment.
      private: double InstrumentLastTradePrice_;
   
#endif

#if( /* {private OrdersPeerMessageReceiver_}. */ 1 )

      // This probably doesn't need a datagram circular queue but I want to keep it.
//TODO maybe call {LogActivityReportIfPossible} as soon we receive anything.
      private: TEconomicReportReceiverViaUdpWithDatagramCircularQueue< TEconomicReportReceiverViaUdp< TOrdersPeerMessage_ > >
                      OrdersPeerMessageReceiver_;

#endif
#if( /* {private OrdersPeerMessageReceiverThreadRunnableAdapter_}. */ 1 )

      //
      private: ::Poco::RunnableAdapter< TSecondaryPeerStrategy > OrdersPeerMessageReceiverThreadRunnableAdapter_;

#endif
#if( /* {private OrdersPeerMessageReceiverThread_}. */ 1 )

      // See {EconomicReportReceiverThread_} comment.
      private: ::Common::Threading::TDisposalSafeThread< ::Poco::Thread > OrdersPeerMessageReceiverThread_;

#endif
#if( /* {private PlannedAction1PeerMessageReceiver_}. */ 1 )

      //
      private: TEconomicReportReceiverViaUdpWithDatagramCircularQueue< TEconomicReportReceiverViaUdp< TPlannedAction1PeerMessage_ > >
                      PlannedAction1PeerMessageReceiver_;

#endif
#if( /* {private PlannedAction1PeerMessageReceiverThreadRunnableAdapter_}. */ 1 )

      //
      private: ::Poco::RunnableAdapter< TSecondaryPeerStrategy > PlannedAction1PeerMessageReceiverThreadRunnableAdapter_;

#endif
#if( /* {private PlannedAction1PeerMessageReceiverThread_}. */ 1 )

      // See {EconomicReportReceiverThread_} comment.
      private: ::Common::Threading::TDisposalSafeThread< ::Poco::Thread > PlannedAction1PeerMessageReceiverThread_;

#endif
#if( /* {private PlannedAction2PeerMessageReceiver_}. */ 1 )

      //
      private: TEconomicReportReceiverViaUdpWithDatagramCircularQueue< TEconomicReportReceiverViaUdp< TPlannedAction2PeerMessage_ > >
                      PlannedAction2PeerMessageReceiver_;

#endif
#if( /* {private PlannedAction2PeerMessageReceiverThreadRunnableAdapter_}. */ 1 )

      //
      private: ::Poco::RunnableAdapter< TSecondaryPeerStrategy > PlannedAction2PeerMessageReceiverThreadRunnableAdapter_;

#endif
#if( /* {private PlannedAction2PeerMessageReceiverThread_}. */ 1 )

      // See {EconomicReportReceiverThread_} comment.
      private: ::Common::Threading::TDisposalSafeThread< ::Poco::Thread > PlannedAction2PeerMessageReceiverThread_;

#endif

#if( /* //{(private)} Instance default constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* //{(private)} Instance copy constructor. */ 1 )

      // Cannot be autogenerated.

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TSecondaryPeerStrategy
         ( ::Common::ControlFlow::TThreadedActivityCancellationToken & threadedActivityCancellationToken1
         );

#endif
#if( /* {public} Instance constructor. */ 1 )

      //

      public: explicit TSecondaryPeerStrategy
         ( ::Common::ControlFlow::TThreadedActivityCancellationToken & threadedActivityCancellationToken1,
           TSecondaryPeerStrategyConfiguration && configuration1
         );

#endif
#if( /* {(public)} Instance destructor. */ 1 )

      // Could be autogenerated.
      // {virtual}.

#endif
#if( /* //{(private) operator =}. */ 1 )

      // Cannot be autogenerated.

#endif

#if( /* {public Initialize}. */ 1 )

      //

      public: void Initialize
         ( TSecondaryPeerStrategyConfiguration && configuration1
         );

#endif
#if( /* {private DoInitialize}. */ 1 )

      //

      private: void DoInitialize
         ( TSecondaryPeerStrategyConfiguration && configuration1
         );

#endif
#if( /* {public DoRun}. */ 1 )

      //

      public: virtual void DoRun() override;

#endif

#if( /* {private PrepareDoRun}. */ 1 )

      //

      public: void PrepareDoRun();

#endif
#if( /* {private WaitREngineAdapterReady}. */ 1 )

      //

      private: void WaitREngineAdapterReady() const;

#endif
#if( /* {private RequestSubscribeMarketData}. */ 1 )

      //

      private: void RequestSubscribeMarketData();

#endif
#if( /* {private WaitDateTimeKeeperReady}. */ 1 )

      //

      private: void WaitDateTimeKeeperReady() const;

#endif
#if( /* {private WaitMarketDataValid}. */ 1 )

      //

      private: void WaitMarketDataValid() const;

#endif

#if( /* {private OrdersPeerMessageReceiverThreadProc}. */ 1 )

      //

      private: void OrdersPeerMessageReceiverThreadProc();

#endif

#if( /* {private PlannedAction1PeerMessageReceiverThreadProc}. */ 1 )

      //

      private: void PlannedAction1PeerMessageReceiverThreadProc();

#endif

#if( /* {private PlannedAction2PeerMessageReceiverThreadProc}. */ 1 )

      //

      private: void PlannedAction2PeerMessageReceiverThreadProc();

#endif
   };
}
